}
# delete the no use data of dataframe
# threshold value dataframe 中值应该满足的条件
# deltype： all 所有的 ，any任何一个
delNoUseData<-function(Express,Scol,Ecol,threshold,deltype)
{
Express=na.omit(Express)
Express=ConvertFactortoNumWithRowname(Express)
Express[apply(Express[,Scol:Ecol]<=threshold, FUN = deltype, 1), ] = NA
Express=na.omit(Express)
}
# 删除异常值
delOutliersValue<-function(data,Numofcols,Threshold){
library(matrixStats)
library(Biobase)
data=ConvertFactortoNumWithRowname(data)
data=na.omit(data)
for(i in 1:Numofcols){
data=na.omit(data)
MyMatrix=as.matrix(cbind(data[,i],data[,(Numofcols+i)]))
min=as.data.frame(rowMin(MyMatrix))
max=as.data.frame(rowMax(MyMatrix))
index<-max==0
max[index]=0.0001
min[index]=0.0001
index.enst<-((min/max)<(1/Threshold))    #the index of enst for one ensg
data[index.enst,]=NA
}
data=na.omit(data)
return(data)
}
# 提取高表达基因
SubstantiallyGene<-function(Express,rate)
{
Express=ConvertFactortoNumWithRowname(Express)
Express=na.omit(Express)
Express[apply(Express<=0, FUN = any, 1), ] = NA
Express=na.omit(Express)
allExpression=as.data.frame(rowSums(Express[,10:(length(Express[1,]))]))
Express=cbind(as.data.frame(Express),as.data.frame(allExpression))
Express=Express[order(Express[,length(Express[1,])],decreasing=TRUE),]
highexpressiongene=Express[1:as.integer(length(Express[,1])*rate),]
return(highexpressiongene)
}
# 画韦恩图
# Express1=LabArep1
# Express2=LabArep2
DawingVENNfiguroftwoset<-function(Express1,Express2){
library(gplots)
i=1
GroupA<-as.list(rownames(Express1))
GroupB<-as.list(rownames(Express2))
input <-list(GroupA,GroupB)
venn(input)
}
#两组数据集递进画韦恩图
# # 画韦恩图
# # 画韦恩图,得到rep1和rep2在按照表达从高到低排序的，取相同比例的子集中的交集的韦恩图
DawingIntegerVENNfigure<-function(Express1,Express2,savefilename){
graphics.off()
png(file=paste(savefilename,"VENN.png",sep=""), bg = "white")
par(mfrow=c(3,3))
for(i in 1:9){
highLabArep12=SubstantiallyGene(Express1,0.1*i)
highLabArep22=SubstantiallyGene(Express2,0.1*i)
DawingVENNfiguroftwoset(highLabArep12,highLabArep22)
}
dev.off()
}
# 将表达水平编程fold倍数，和0时刻相比
# Express=subLabA_REP1
convertExpressToFoldCHANGE<-function(Express){
Express=ConvertFactortoNumWithRowname(Express)
Express[Express==0]<-0.0001
type=c()
for(i in seq(1,length(Express[1,]),3)){
type=c(type,i)
}
for(i in type){
Express[,i+1]=log2(Express[,i+1]/Express[,i])
Express[,i+2]=log2(Express[,i+2]/Express[,i])
Express[,i]=0
}
return(Express)
}
convertExpressToFoldCHANGElog<-function(Express){
Express=ConvertFactortoNumWithRowname(Express)
type=c()
for(i in seq(1,length(Express[1,]),3)){
type=c(type,i)
}
for(i in type){
Express[,i+1]=2^(Express[,i+1] - Express[,i])
Express[,i+2]=2^(Express[,i+2] - Express[,i])
Express[,i]=0
}
return(Express)
}
ConverttoDataWithRownames<-function(Express){
rownames(Express)=Express[,1]
Express=Express[,2:length(Express[1,])]
return(Express)
}
#!/usr/bin/env Rscript
# 16.12.2013 18:29:02 EST
# Harm van Bakel <hvbakel@gmail.com>
# Romain Fenouil
#############
# ARGUMENTS #
#############
#  Col 1: the long flag name. A multi-character string.
#  Col 2: short flag alias of Column 1. A single-character string.
#  Col 3: 0=no argument, 1=required argument, 2=optional argument.
#  Col 4: Possible values: logical, integer, double, complex, character.
#  Col 5: A brief description of the purpose of the option.
suppressMessages(library(getopt));
args = matrix(c('input'         , 'i', 1, "character", "Tab-delimited raw data matrix with genes in rows and samples in columns. Must include a header corresponding to data columns only (i.e. don't include a header for the first column with gene names).",
'design'        , 'd', 1, "character", "Tab-delimited design matrix. Must include a first column with sample names matching data matrix column header, and a 'Group' column with experimental conditions to compare.",
'contrasts'     , 'c', 1, "character", "Tab-delimited contrast matrix containing two columns with the headers 'Reference' and 'Condition', specifying pairwise group contrasts to analyze. Multiple contrasts can be specified in different rows.",
'annots'        , 'a', 1, "character", "Tab-delimited gene annotation file that includes a header with the following columns: GeneID, Chr, Length, Symbol, type_of_gene",
'models'        , 'm', 2, "character", "Optional tab-delimited file with model formulas (modelname <tab> formula). Supported models: variancePartition, voom",
'output'        , 'o', 2, "character", "Optional output folder prefix.",
'flt_minrowsum' , 'r', 1, "numeric",   "Restrict analysis to genes with rowsum count greater than this value (set to 0 to disable). Default: 50",
'flt_minlength' , 'l', 1, "numeric",   "Restrict analysis to genes with length greater than this value (set to 0 to disable). Default: 200",
'flt_genetype'  , 'z', 1, "character", "Restrict analysis to genes of specified biotypes, provided as a comma-separated list. Default: protein_coding,lincRNA,antisense,processed_transcript",
'pvalue'        , 'p', 1, "numeric",   "P-value threshold for differential gene expression analysis. Default: 0.05",
'annotgrps'     , 'y', 1, "character", "Optional comma-separated list of column headers in the design file prepare MDS plots for, and to annotate in hierarchical clustering heatmaps. Default: Group",
'batchcorrect'  , 'b', 2, "character", "Optional comma-delimited list of batch effects to remove before hierarchical clustering. Must match column headers in design file and parameters in voom model. Default: None",
'GOpvalue'      , 'g', 2, "numeric",   "P-value threshold for GO analysis (default 0.05)",
'GOorganism'    , 's', 2, "character", "Organism used for GO analysis (default 'human', restricted to 'human' or 'mouse', see 'GO_enrichmentFromGenome' to add others)",
'GOanno'        , 't', 2, "character", "Annotations type used for GO analysis (restricted to 'symbol' or 'ensembl', see 'GO_enrichmentFromGenome' to add others)",
'GOtopTerms'    , 'n', 2, "numeric",   "Maximal number of (most significant) GO terms returned for each list of genes (default 15)",
'processors'    , 'P', 2, "numeric",   "Number of processors to use. Default: 2 or obtained from LSF environment",
'help'          , 'h', 0, "logical",   "Brief help message"
), ncol=5,byrow=T);
opt  = getopt(args);
# For debug : opt=list(); opt[["input"]]="stage1-gene-counts_fpkmfilt.txt"; opt[["design"]]="stage1-design-all-mod-subgroups.txt"; opt[["contrasts"]]="stage1-contrasts.txt"; opt[["annots"]]="gencode.v23.annotation.anno";
# Specify default argument values
if ( is.null(opt$output) )         { opt$output        = ""         }
if ( is.null(opt$pvalue) )         { opt$pvalue        = 0.05       }
if ( is.null(opt$GOpvalue) )       { opt$GOpvalue      = 0.05       }
if ( is.null(opt$GOorganism) )     { opt$GOorganism    = "human"    }
if ( is.null(opt$GOanno) )         { opt$GOanno        = "ensembl"  }
if ( is.null(opt$GOtopTerms) )     { opt$GOtopTerms    = 15         }
if ( is.null(opt$annotgrps) )      { opt$annotgrps     = "Group"    }
if ( is.null(opt$flt_minrowsum) )  { opt$flt_minrowsum = 50         }
if ( is.null(opt$flt_minlength) )  { opt$flt_minlength = 200        }
if ( is.null(opt$flt_genetype) )   { opt$flt_genetype  = "protein_coding,lincRNA,antisense,processed_transcript" }
# Set number of processors
if ( is.null(opt$processors) ) {
env.ncpu = as.integer(Sys.getenv(c('JOB_NCPUS')));
if (is.na(env.ncpu)){
opt$processors = 2;
}
else{
opt$processors = env.ncpu;
}
}
# Check arguments valdity for GO analyses
if(!(opt$GOorganism %in% c("human", "mouse"))) stop("Argument 'GOorganism' must be 'human' or 'mouse'...");
if(!(opt$GOanno     %in% c("ensembl", "symbol"))) stop("Argument 'GOanno' must be 'ensembl' or 'symbol'...");
# Help message
if ( !is.null(opt$help) || is.null(opt$input)  || is.null(opt$design) || is.null(opt$contrasts) || is.null(opt$annots) || is.null(opt$annotgrps) || is.null(opt$flt_genetype) ) {
self=sub("^.*/", "", commandArgs()[4], perl=T);
cat("\n", getopt(args, command=self, usage=T), "\n");
q(status=1);
}
#############
# LIBRARIES #
#############
# Load stats and plotting libraries
suppressMessages(library(edgeR, quietly=T));
suppressMessages(library(limma, quietly=T));
suppressMessages(library(gplots, quietly=T));
suppressMessages(library(NMF, quietly=T));
suppressMessages(library(variancePartition, quietly=T));
# Load annotation databases for GO analyses (human and mouse, add if needed)
suppressMessages(library(org.Hs.eg.db, quietly=T)); # Human
suppressMessages(library(org.Mm.eg.db, quietly=T)); # Mouse
# Load RF library (containing GO wrappers based on topGO)
suppressMessages(library(RFutils, quietly=T));
# Parallel cpu
suppressMessages(library(doParallel, quietly=T));
#############
# FUNCTIONS #
#############
# Make a pairwise plot of normalized count data for QC purposes
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr));
par(usr = c(0, 1, 0, 1));
r <- cor(x, y);
txt <- format(c(r, 0.123456789), digits=digits)[1];
txt <- paste(prefix, txt, sep="");
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt);
text(0.5, 0.5, txt, cex = cex.cor * abs(r));
}
########
# MAIN #
########
# Load data
# data.raw       = read.delim(opt$input, check.names=F);
# data.design    = read.delim(opt$design,stringsAsFactors=T);
# data.contrasts = read.delim(opt$contrasts,stringsAsFactors=F, header=T);
# data.anno      = read.delim(opt$annots, header=T);
# colnames(data.anno)=c("GeneID","Chr","Length","Symbol","type_of_gene");
# Read optional model file
data.models = NULL;
if (!is.null(opt$models)){
data.models = read.delim(opt$models, stringsAsFactors=F, header=F);
}
# Select the appropriate annotation database and table for GO analyses
GO_mappingDB = ifelse(opt$GOorganism=="human", "org.Hs.eg.db", "org.Mm.eg.db");
GO_mappingID = if(GO_mappingDB=="org.Hs.eg.db") {if(opt$GOanno=="ensembl") org.Hs.egENSEMBL else org.Hs.egSYMBOL} else {if(opt$GOanno=="ensembl") org.Mm.egENSEMBL else  org.Mm.egSYMBOL};
# Split annotation column group names
opt$annotgrps = unlist(strsplit(opt$annotgrps, split=","));
# Check if the data, design and contrast matrices are all consistent
if(!all(colnames(data.raw) == data.design[,1])){
stop("Error: First column in the design matrix does not match the data file header\n");
}
if(!all(rownames(data.raw) %in% data.anno$GeneID)){
stop("Error: Data matrix contains gene IDs that do not exist in the gene annotation file\n");
}
if(!all("Group" %in% colnames(data.design))){
stop("Error: The design matrix must contain a 'Group' column that defines the contrast groups\n");
}
if(!all(c("Condition","Reference") %in% colnames(data.contrasts))){
stop("Error: The contrast matrix must have columns with header names 'Condition' and 'Reference'\n");
}
if(!all(data.contrasts$Condition %in% data.design$Group)){
stop("Error: Condition(s) specified in the contrast matrix that are not present in the Group column of the design file\n");
}
if(!all(data.contrasts$Reference %in% data.design$Group)){
stop("Error: Reference(s) specified in the contrast matrix that are not present in the Group column of the design file\n");
}
if(!all(opt$annotgrps %in% colnames(data.design))){
stop("Error: Annotation color groups specified that are not present in the Group column of the design file\n");
}
if(any(any(duplicated(paste(data.contrasts$Reference,data.contrasts$Condition))))){
stop("Error: Duplicate contrasts specified in the contrasts file\n");
}
# Set up the voom model
voom.model = "~0+Group";
if (!is.null(data.models)){
if ( any('voom' %in% data.models[,1]) ){
voom.row   = match("voom", data.models[,1])[1];
voom.model = as.character( data.models[voom.row,2] );
}
if (length(grep("Group",voom.model,fixed=F)) == 0){
stop( paste("Error: The required 'Group' parameter was not found in the specified voom model '", voom.model, "'. Please change voom model or batch correction parameters.\n", sep="") );
}
}
cat( paste("Using voom model:", voom.model, "\n") );
# Set up the optional batch correction model
batch.model = "";
if(!is.null(opt$batchcorrect)){
batch.model = voom.model;
opt$batchcorrect = unlist(strsplit(opt$batchcorrect, split=","));
# Check if batch groups specified actually exist in the design matrix
if(!all(opt$batchcorrect %in% colnames(data.design))){
stop("Error: Batch correction parameters specified that do not occur in the design matrix column header\n");
}
if( length(opt$batchcorrect) >2 ){
stop("Error: More than two batch correction parameters are not supported\n");
}
# Use the voom model to derive a batch correction model that excludes the batch correction terms
for(i in opt$batchcorrect){
replace.term = paste("\\+\\s*", i, sep="");
if (length(grep(i,voom.model,fixed=F)) == 0){
stop( paste("Error: Batch correction parameter '", i, "' was not found in the specified voom model '", voom.model, "'. Please change voom model or batch correction parameters.\n", sep="") );
}
batch.model = gsub(replace.term, "", batch.model);
}
}
# Create output dir
general_output_dir = paste(opt$output, "FDR_q", opt$pvalue, sep="");
dir.create(general_output_dir, showWarnings = FALSE);
# Write analysis parameters
dput(opt, file = paste(general_output_dir, "analysis_parameters.txt", sep="/"))
write.table(data.models, file=paste(general_output_dir, "analysis_models.txt", sep="/"), row.names=F, col.names=F, sep="\t", quote=F);
# Set up parallel computing
cl = makeCluster(opt$processors)
registerDoParallel(cl)
# Make a DGElist object
m = match(rownames(data.raw),data.anno$GeneID);
data.raw=ConvertFactortoNumWithRowname(data.raw)
data.raw[is.na(data.raw)]<-0
data.raw=as.matrix(data.raw)
data.dgelist = DGEList(counts=data.raw, genes=data.anno[m,]);
# Filter out very low-expressed genes
if (opt$flt_minrowsum > 0){
keep = rowSums(data.dgelist$counts) > opt$flt_minrowsum;
data.dgelist = data.dgelist[keep,];
}
# Filter out genes below a certain length
if (opt$flt_minlength > 0){
keep = data.dgelist$genes$Length >  opt$flt_minlength;
data.dgelist = data.dgelist[keep,];
}
# keep only certain categories of genes
if (!is.null(opt$flt_genetype)){
opt$flt_genetype = unlist(strsplit(opt$flt_genetype, split=","));
keep = data.dgelist$genes$type_of_gene %in% opt$flt_genetype;
data.dgelist = data.dgelist[keep,];
}
# Reset lib sizes after filtering
data.dgelist$samples$lib.size = colSums(data.dgelist$counts);
# Normalize data with TMM
data.norm = calcNormFactors(data.dgelist);
write.table(data.norm$samples, file=paste(general_output_dir, "normalization-factors.txt", sep="/"), row.names=T, col.names=T, sep="\t", quote=F);
# Make normalization QC plots
legend.grps = as.character(unique(data.design$Group));
legend.cols = rainbow(length(legend.grps));
my_palette  = data.frame(Group=legend.grps, Color=legend.cols );
my_palette  = plyr::join(data.frame(Group=data.design$Group), my_palette);
plot.cols   = as.character(my_palette$Color);
pdf(file=paste(general_output_dir, "QC_normalization.pdf", sep="/"), width=10, height=5);
barplot(data.dgelist$samples$lib.size, col=plot.cols, names.arg=rownames(data.dgelist$samples), las=2, main="Library sizes");
legend("topright", fill=legend.cols, legend=as.character(legend.grps), title="Group");
boxplot(cpm(data.norm, normalized.lib.sizes=F, log=T), main="CPM - before normalization", col=plot.cols);
boxplot(cpm(data.norm, normalized.lib.sizes=T, log=T), main="CPM - after normalization", col=plot.cols);
dev=dev.off();
# Make MDS plot
pdf(file=paste(general_output_dir, "QC_MDS.pdf", sep="/"));
for (val in opt$annotgrps){
legend.grps = as.character(unique(data.design[[val]]));
legend.cols = rainbow(length(legend.grps));
my_palette  = data.frame(Category=legend.grps, Color=legend.cols );
my_palette  = plyr::join(data.frame(Category=data.design[[val]]), my_palette);
plot.cols   = as.character(my_palette$Color);
plotMDS(data.norm, labels=data.design[[val]], col=plot.cols, top=500, gene.selection="common", prior.count = 5, main=val);
}
dev=dev.off();
# Make pairwise scatter plots
logCPM = cpm(data.norm, normalized.lib.sizes=TRUE, log=TRUE, prior.count=3);
png(file=paste(general_output_dir, "QC_pairwise-scatterplots.png", sep="/"), width=2000, height=2000);
pairs(logCPM, pch='.', upper.panel=panel.cor, lower.panel=points);
dev = dev.off();
# Set up the design
design = model.matrix(as.formula(voom.model), data=data.design);
# Voom transform
png(file=paste(general_output_dir, "QC_voom-plot.png", sep="/"), width=800, height=800);
# data.voom = voom(data.norm, design, plot = F);
data.voom = voom(data.norm,plot=TRUE);
dev= dev.off();
# Run variancePartition to examine variance components if a model formula was provided
if (!is.null(data.models)){
if ( any('variancePartition' %in% data.models[,1]) ){
form.row   = match("variancePartition", data.models[,1])[1];
form.model = as.character( data.models[form.row,2] );
data.varpart = fitExtractVarPartModel(data.voom, form.model, data.design);
vp = sortCols(data.varpart);
plot.varpart = plotVarPart(vp);
plot.pctbars = plotPercentBars(vp[1:20,]);
pdf(file=paste(general_output_dir, "QC_variance-partition.pdf", sep="/"), width=10, height=5);
print(plot.varpart);
print(plot.pctbars);
dev = dev.off();
}
}
# Fit design and set up contrasts for differential expression analysis
fit = lmFit(data.voom, design);
# Get the log-normalized count matrix and write to file
pm= cpm(data.norm, normalized.lib.sizes=TRUE, log=TRUE, prior.count=3);
pm1= cpm(data.norm, normalized.lib.sizes=TRUE, log=F, prior.count=3);
colnames(pm) = data.design[,1];
write.table(pm, file=paste(general_output_dir, "voom-logcpm.txt", sep="/"), row.names=T, col.names=T, sep="\t", quote=F);
# Optionally, do batch effect correction on the count matrix
if (!is.null(opt$batchcorrect)){
if ( length(opt$batchcorrect) == 2 ){
batch1 = data.design[[opt$batchcorrect[1]]];
batch2 = data.design[[opt$batchcorrect[2]]];
}
else{
batch1 = data.design[[opt$batchcorrect[1]]];
batch2 = NULL;
}
batch.design = model.matrix(as.formula(batch.model), data=data.design);
pm = removeBatchEffect(pm, design=batch.design, batch=batch1, batch2=batch2);
write.table(pm, file=paste(general_output_dir, "voom-logcpm_batch-effects-removed.txt", sep="/"), row.names=T, col.names=T, sep="\t", quote=F);
}
# Differential expression analysis for each contrast
resultsGO=list();
resultsDE=c();
for (row in 1:nrow(data.contrasts)){
# Set up contrast
contrast.name = paste(data.contrasts[row,]$Condition, "vs", data.contrasts[row,]$Reference, sep="_");
contrast.expr = paste("Group", data.contrasts[row,]$Condition, "-Group", data.contrasts[row,]$Reference, sep="");
my.contrasts  = makeContrasts(contrast.expr, levels=design);
colnames(my.contrasts) = contrast.name;
# Create analysis dir name
dirname = paste(general_output_dir, "/contrast_", contrast.name, "_p", opt$pvalue, sep="");
dir.create(dirname, showWarnings = FALSE);
# Fit
fit2 = contrasts.fit(fit,my.contrasts);
fit2 <- eBayes(fit2);
# Do test
diff.exp    = topTable(fit2, coef=contrast.name, number=Inf, p.value=opt$pvalue, adjust.method="BH")
diff.exp.up = diff.exp[diff.exp$logFC>=0,];
diff.exp.dn = diff.exp[diff.exp$logFC<0,];
up.ids      = as.character(diff.exp.up$GeneID);
dn.ids      = as.character(diff.exp.dn$GeneID);
al.ids      = unique(c(up.ids,dn.ids));
resultsDE   = unique(c(resultsDE, al.ids));
# Create and (eventually) populate a list of IDs used for GO analysis
listIDs=list();
if(length(up.ids)) listIDs[[paste(contrast.name, "UP", sep="_")]] = sub("\\.\\d+$","",up.ids);  # Make sure to remove version numbers from ensembl gene IDs otherwise GO lookups will fail
if(length(dn.ids)) listIDs[[paste(contrast.name, "DN", sep="_")]] = sub("\\.\\d+$","",dn.ids);  # Make sure to remove version numbers from ensembl gene IDs otherwise GO lookups will fail
# Set status
status = rep("Other", nrow(fit2))
status[fit2$genes$GeneID %in% up.ids] = "Up";
status[fit2$genes$GeneID %in% dn.ids] = "Dn";
# Smear plot
pdf(file=paste(dirname, "/contrast_", contrast.name, "_smear.pdf", sep=""))
plotMD(fit2, status=status, values=c("Up","Dn"),hl.col=c("red","blue"), hl.cex=0.3, ylim=c(-11,11), main=contrast.name)
dev=dev.off()
# Volcano plot
pdf(file=paste(dirname, "/contrast_", contrast.name, "_volcano.pdf", sep=""))
volcanoplot(fit2, main=contrast.name, highlight=20, names=fit$genes$Symbol)
dev=dev.off()
# Toptag table, all
full.tags = topTable(fit2, coef=contrast.name, number=Inf)
write.table(full.tags, file=paste(dirname, "/contrast_", contrast.name, "_all.txt", sep=""), row.names=F, col.names=T, sep="\t", quote=F)
# IDs, up and down
write.table(diff.exp,    file=paste(dirname, "/contrast_", contrast.name, "_logfold.txt", sep=""), row.names=F, col.names=T, sep="\t", quote=F)
write.table(diff.exp.up, file=paste(dirname, "/contrast_", contrast.name, "_up.txt", sep=""), row.names=F, col.names=T, sep="\t", quote=F)
write.table(diff.exp.dn, file=paste(dirname, "/contrast_", contrast.name, "_dn.txt", sep=""), row.names=F, col.names=T, sep="\t", quote=F)
# Heatmaps
if (length(al.ids)>1){
# Subset data matrix
pmd = pm[rownames(pm) %in% al.ids,]
# Set up color pallette
my_palette <- colorRampPalette(c("blue", "white", "red"))(n = 100)
# Set up row annotations for up- and down-regulated genes
row.anno.diffexp = rep("Dn", nrow(pmd))
row.anno.diffexp[rownames(pmd) %in% up.ids] = "Up";
row.anno.Amean   = fit2$Amean[match(rownames(pmd), names(fit2$Amean))];
row.anno.logp    = -log10(fit2$F.p.value[match(rownames(pmd), names(fit2$Amean))]);
# Set up Row annotation dataframe
annRow = data.frame(DiffExp=row.anno.diffexp, LogP=row.anno.logp);
# Make heatmap plot
nmf.options(grid.patch=TRUE) # Patch to avoid blank page before heatmap
tryCatch(
{
pdf(file=paste(dirname, "/contrast_", contrast.name, "_heatmap.pdf", sep=""))
aheatmap(pmd, annRow=annRow, annCol=data.design[,colnames(data.design) %in% opt$annotgrps, drop=F], color=my_palette, scale="row", distfun=function(x) as.dist((1-cor(t(x),method="pearson"))/2))
},
error=function(e){ # Just print exception message
message("Error generating heatmap: ");
print(e);
},
finally=dev.off()
);
nmf.options(grid.patch=FALSE);
}
#   # GO enrichment (the block is encapsulated in a tryCatch call not to cancel
#   # all the script if the GO analysis throws an error)
#   if(length(listIDs)){
#     tryCatch(
#       {
#         # Compute the GO enrichments
#         GO_Enrichment=GO_enrichmentFromGenome(listIDs, reference="all", ontologies=c("BP", "MF", "CC"), mapping=GO_mappingDB, ID=opt$GOanno, mappingID=GO_mappingID, topNodes=opt$GOtopTerms, correction="BH");
#
#         # Filter out terms based on corrected P-value
#         tableResultList=GO_filterEnrichment_Pvalue(GO_Enrichment$tableResultList, pValue=opt$GOpvalue);
#
#         # Add results of this GO analysis to a total table for summary plot
#         resultsGO[["BP"]]=c(resultsGO[["BP"]], tableResultList[["BP"]]);
#         resultsGO[["MF"]]=c(resultsGO[["MF"]], tableResultList[["MF"]]);
#         resultsGO[["CC"]]=c(resultsGO[["CC"]], tableResultList[["CC"]]);
#
#         # Extract the list of enrichments as tsv files
#         GO_writeEnrichmentTable(tableResultList, fileName=paste(dirname, "/contrast_", contrast.name, "_GO.tsv", sep=""));
#
#         # Plot the resulting enrichments as a graphic
#         pdf(file=paste(dirname, "/contrast_", contrast.name, "_GO.pdf", sep=""), height=20, width=10);
#         oldPar=par(mar=rep(0.5,4));
#         GO_plotClusterAndGenes(tableResultList, create.dev=NULL, gridCol=NA, genes.cex=0.7, titleSpace=12, textSpace=35);
#         par(oldPar);
#       },
#       error=function(e){ # Just print exception message
#         message("Error during GO analysis: ");
#         print(e);
#       },
#       finally=dev.off()
#     ); # Close the file descriptor
#   }
}
# Plot a summary of all GO analyses on a single graphic for all contrasts
tryCatch(
{
# Plot the resulting enrichments as a graphic
pdf(file=paste(general_output_dir, "GO_all-contrasts.pdf", sep="/"), height=20, width=10);
oldPar=par(mar=rep(0.5,4));
GO_plotClusterAndGenes(resultsGO, create.dev=NULL, gridCol=NA, genes.cex=0.7, titleSpace=12, textSpace=35);
par(oldPar);
},
error=function(e){ # Just print exception message
message("Error while plotting GO summary: ");
print(e);
},
finally=dev.off()
); # Close the file descriptor
# Make a summary heatmap
pmd = pm[rownames(pm) %in% resultsDE,]
my_palette <- colorRampPalette(c("blue", "white", "red"))(n = 100)
nmf.options(grid.patch=TRUE) # Patch to avoid blank page before heatmap
pdf(file=paste(general_output_dir, "heatmap_all-contrasts.pdf", sep="/"))
aheatmap(pmd, annCol=data.design[,colnames(data.design) %in% opt$annotgrps, drop=F], color=my_palette, scale="row", distfun=function(x) as.dist((1-cor(t(x),method="pearson"))/2))
dev=dev.off()
nmf.options(grid.patch=FALSE)
# Save image of the limma environment
save.image(file = paste(general_output_dir, "limma-analysis.RData", sep="/"))
